{"version":3,"sources":["helpers/sortFunction.js","actions/index.js","reducers/index.js","helpers/fetchGifs.js","components/search/Search.jsx","components/searchOptions/SearchOptions.jsx","components/header/Header.jsx","components/gifsList/GifsList.jsx","pages/home/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["sortFunctionASC","a","b","import_datetime","loadGifsSuccess","gifs","type","payload","loadGifsFailed","error","initialState","items","isLoading","errors","isTrending","query","gifPerPage","rating","offset","sortByDate","mainReducer","state","action","sort","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","apiKey","fetchTrendingGifs","dispatch","fetch","then","res","status","json","data","err","Search","useState","inputValue","setInputValue","useDispatch","handleSearch","useSelector","fetchSearchedGifs","className","data-testid","TextField","id","label","variant","value","onChange","e","target","onKeyPress","key","preventDefault","Button","color","onClick","SearchOptions","setValue","selector","FormControlLabel","control","Switch","checked","name","Header","GifsList","modalGif","setModalGif","onGifClick","gif","breakpointCols","default","1100","700","500","columnClassName","map","width","style","position","top","left","right","bottom","display","justifyContent","alignItems","background","undefined","href","class","Home","useEffect","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.baf110f7.chunk.js","sourcesContent":["export default function sortFunctionASC(a,b) {\r\n    return (a.import_datetime > b.import_datetime) ? \r\n    1 : \r\n    ((b.import_datetime > a.import_datetime) ? -1 : 0);\r\n} \r\n\r\nexport function sortFunctionDESC(a,b) {\r\n    return (a.import_datetime > b.import_datetime) ? \r\n    1 : \r\n    ((b.import_datetime > a.import_datetime) ? -1 : 0);\r\n} ","export const LOAD_GIFS_PENDING = \"LOAD_GIFS_PENDING\";\r\nexport const LOAD_GIFS_SUCCESS = \"LOAD_GIFS_SUCCESS\";\r\nexport const LOAD_GIFS_FAILED = \"LOAD_GIFS_FAILED\";\r\nexport const SET_IS_TRENDING = 'SET_IS_TRENDING';\r\nexport const SET_QUERY = 'SET_QUERY';\r\nexport const SET_TYPE = 'SET_TYPE';\r\nexport const SORT_BY_DATE = 'SORT_BY_DATE';\r\n\r\nexport const loadGifsPending = () => ({\r\n  type: LOAD_GIFS_PENDING,\r\n});\r\n\r\nexport const loadGifsSuccess = (gifs) => ({\r\n  type: LOAD_GIFS_SUCCESS,\r\n  payload: gifs,\r\n});\r\n\r\nexport const loadGifsFailed = (error) => ({\r\n  type: LOAD_GIFS_FAILED,\r\n  payload: error,\r\n});\r\n\r\nexport const setIsTrending = (isTrending) => ({\r\n  type: SET_IS_TRENDING,\r\n  payload: isTrending,\r\n});\r\n\r\nexport const setQuery = (query) => ({\r\n  type: SET_QUERY,\r\n  payload: query,\r\n});\r\n\r\nexport const setType = (type) => ({\r\n  type: SET_TYPE,\r\n  payload: type,\r\n});\r\n\r\nexport const sortByDate = (isSorted) => ({\r\n  type: SORT_BY_DATE,\r\n  payload: isSorted,\r\n});","import { createStore, compose, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport sortFunctionASC from '../helpers/sortFunction';\r\n\r\nimport {\r\n  LOAD_GIFS_PENDING,\r\n  LOAD_GIFS_SUCCESS,\r\n  LOAD_GIFS_FAILED,\r\n  SET_IS_TRENDING,\r\n  SET_QUERY,\r\n  SET_TYPE,\r\n  SORT_BY_DATE\r\n} from \"../actions\";\r\n\r\nconst initialState = {\r\n  items: [],\r\n  isLoading: false,\r\n  errors: [],\r\n  isTrending: true,\r\n  query: \"\",\r\n  type: \"gifs\",\r\n  gifPerPage: 20,\r\n  rating: \"g\",\r\n  offset: 0,\r\n  sortByDate: false,\r\n};\r\n\r\nconst mainReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case LOAD_GIFS_PENDING:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case LOAD_GIFS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        items: action.payload,\r\n        isLoading: false,\r\n      };\r\n    case LOAD_GIFS_FAILED:\r\n      return {\r\n        ...state,\r\n        errors: action.payload,\r\n        isLoading: false,\r\n      };\r\n    case SET_QUERY:\r\n      return {\r\n        ...state,\r\n        query: action.payload,\r\n      };\r\n    case SET_IS_TRENDING:\r\n      return {\r\n        ...state,\r\n        isTrending: action.payload,\r\n      };\r\n    case SET_TYPE:\r\n      return {\r\n        ...state,\r\n        type: action.payload,\r\n      };\r\n    case SORT_BY_DATE:\r\n      if (state.sortByDate) {\r\n        return {\r\n          ...state,\r\n          sortByDate: action.payload,\r\n        };\r\n      } else {\r\n        return {\r\n          ...state,\r\n          sortByDate: action.payload,\r\n          items: [...state.items.sort(sortFunctionASC)],\r\n        };\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default mainReducer;\r\n\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const store = createStore(\r\n  mainReducer,\r\n  composeEnhancer(applyMiddleware(thunk))\r\n);\r\n","import { loadGifsSuccess, loadGifsPending, loadGifsFailed } from \"../actions\";\r\n\r\nconst apiKey = \"I1d4vejcCtbSj1gZKPq6gTKSbPhPE3KD\";\r\n\r\nexport function fetchTrendingGifs(type, gifPerPage, rating, offset) {\r\n  return (dispatch) => {\r\n    dispatch(loadGifsPending());\r\n    try {\r\n      fetch(\r\n        `https://api.giphy.com/v1/${type}/trending?api_key=${apiKey}&limit=${gifPerPage}&rating=${rating}&offset=${offset}`\r\n      ).then((res) => {\r\n        if (res.status === 200) {\r\n          res.json().then((res) => {\r\n            dispatch(loadGifsSuccess(res.data));\r\n          });\r\n        } else {\r\n          dispatch(loadGifsFailed(res.status));\r\n        }\r\n      });\r\n    } catch (err) {\r\n      dispatch(loadGifsFailed(err));\r\n    }\r\n  };\r\n}\r\nexport function fetchSearchedGifs(type, gifPerPage, rating, offset, query) {\r\n  return (dispatch) => {\r\n    dispatch(loadGifsPending());\r\n    try {\r\n      fetch(\r\n        `https://api.giphy.com/v1/${type}/search?api_key=${apiKey}&limit=${gifPerPage}&rating=${rating}&offset=${offset}&q=${query}`\r\n      ).then((res) => {\r\n        if (res.status === 200) {\r\n          res.json().then((res) => {\r\n            dispatch(loadGifsSuccess(res.data));\r\n          });\r\n        } else {\r\n          dispatch(loadGifsFailed(res.status));\r\n        }\r\n      });\r\n    } catch (err) {\r\n      dispatch(loadGifsFailed(err));\r\n    }\r\n  };\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { SET_IS_TRENDING, SET_QUERY, SORT_BY_DATE } from \"../../actions\";\r\nimport { fetchSearchedGifs,fetchTrendingGifs } from \"../../helpers/fetchGifs\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport \"./search.scss\";\r\n\r\nconst Search = ({ type, gifPerPage, rating, offset }) => {\r\n  const [inputValue, setInputValue] = useState();\r\n  const dispatch = useDispatch();\r\n  const isTrending = useSelector((state) => state.isTrending);\r\n\r\n  const handleOnChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSearch = () => {\r\n    dispatch(fetchSearchedGifs(type, gifPerPage, rating, offset, inputValue));\r\n    dispatch({ type: SET_IS_TRENDING, payload: false });\r\n    dispatch({ type: SORT_BY_DATE, payload: false });\r\n    dispatch({ type: SET_QUERY, payload: inputValue });\r\n  };\r\n\r\n  const handleTrending = () => {\r\n    dispatch(fetchTrendingGifs(type, gifPerPage, rating, offset));\r\n  }\r\n\r\n  return (\r\n    <div className=\"search__container\" data-testid=\"search__container\">\r\n      <TextField\r\n        id=\"outlined-basic\"\r\n        label=\"Search for gifs...\"\r\n        className=\"search__input\"\r\n        variant=\"outlined\"\r\n        data-testid=\"search__input\"\r\n        value={inputValue}\r\n        onChange={handleOnChange}\r\n        onKeyPress={(e) => {\r\n          if (e.key === \"Enter\") {\r\n            e.preventDefault();\r\n            handleSearch();\r\n          }\r\n        }}\r\n      />\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={handleSearch}\r\n        data-testid=\"search__button\"\r\n        className=\"search__button\"\r\n\r\n      >\r\n        Search\r\n      </Button>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"secondary\"\r\n        onClick={handleTrending}\r\n        data-testid=\"trending__button\"\r\n        className=\"trending__button\"\r\n      >\r\n        Trending\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { SET_TYPE, SORT_BY_DATE } from \"../../actions\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport \"./searchOptions.scss\";\r\n\r\nconst SearchOptions = ({ type,gifPerPage, rating, offset }) => {\r\n  const sortByDate = useSelector((state) => state.sortByDate);\r\n  const query = useSelector((state) => state.query);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const setValue = (selector, value) => {\r\n    switch (selector) {\r\n      case \"type\":\r\n          dispatch({ type: SET_TYPE, payload: value });\r\n        break;\r\n      case \"sortByDate\":\r\n        return dispatch({ type: SORT_BY_DATE, payload: value });\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n  return (\r\n      <div className=\"searchOptions__container\" data-testid=\"searchOptions__container\">\r\n      <FormControlLabel\r\n      data-testid=\"switch__gifs\"\r\n        control={\r\n          <Switch\r\n            checked={type === \"gifs\"}\r\n            onChange={() => {\r\n              type === \"gifs\"\r\n                ? setValue(\"type\", \"stickers\")\r\n                : setValue(\"type\", \"gifs\");\r\n            }}\r\n            color=\"primary\"\r\n            name=\"gifs\"\r\n          />\r\n        }\r\n        label=\"gifs\"\r\n      />\r\n      <FormControlLabel\r\n        control={\r\n          <Switch\r\n            checked={type === \"stickers\"}\r\n            onChange={() => {\r\n              type === \"gifs\"\r\n                ? setValue(\"type\", \"stickers\")\r\n                : setValue(\"type\", \"gifs\");\r\n            }}\r\n            color=\"primary\"\r\n            name=\"stickers\"\r\n          />\r\n        }\r\n        label=\"stickers\"\r\n      />\r\n      <FormControlLabel\r\n        control={\r\n          <Switch\r\n            checked={sortByDate}\r\n            onChange={() => setValue(\"sortByDate\", !sortByDate)}\r\n            color=\"primary\"\r\n            name=\"sortByDate\"\r\n          />\r\n        }\r\n        label=\"Sort by date\"\r\n      />\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default SearchOptions;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport Search from '../search/Search';\r\nimport SearchOptions from '../searchOptions/SearchOptions';\r\n\r\nconst Header = () => {\r\n  const type = useSelector((state) => state.type);\r\n  const gifPerPage = useSelector((state) => state.gifPerPage);\r\n  const rating = useSelector((state) => state.rating);\r\n  const offset = useSelector((state) => state.offset);\r\n\r\n  return (\r\n    <div className=\"header__container\" data-testid=\"header__container\">\r\n      <Search type={type} gifPerPage={gifPerPage} rating={rating} offset={offset}/>\r\n      <SearchOptions type={type} gifPerPage={gifPerPage} rating={rating} offset={offset}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\nimport { Gif } from \"@giphy/react-components\";\r\nimport Masonry from \"react-masonry-css\";\r\nimport \"./gifsList.scss\";\r\n\r\nconst GifsList = ({ gifs }) => {\r\n  const [modalGif, setModalGif] = useState();\r\n\r\n  const onGifClick = (gif, e) => {\r\n    e.preventDefault();\r\n    setModalGif(gif);\r\n  };\r\n\r\n  const breakpoints = {\r\n    default: 4,\r\n    1100: 3,\r\n    700: 2,\r\n    500: 1,\r\n  };\r\n\r\n  return (\r\n    <div className=\"gifsList__container\" data-testid=\"gifsList__container\">\r\n      <Masonry\r\n        breakpointCols={breakpoints}\r\n        className=\"my-masonry-grid\"\r\n        columnClassName=\"my-masonry-grid_column\"\r\n      >\r\n        {gifs &&\r\n          gifs.map((gif) => (\r\n            <div key={gif.id} data-testid=\"gif__item\">\r\n              <Gif gif={gif} width={\"100%\"} onGifClick={onGifClick} />\r\n            </div>\r\n          ))}\r\n      </Masonry>\r\n      {modalGif && (\r\n        <div\r\n          style={{\r\n            position: \"fixed\",\r\n            top: 0,\r\n            left: 0,\r\n            right: 0,\r\n            bottom: 0,\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            background: \"rgba(0, 0, 0, .9)\",\r\n          }}\r\n          onClick={(e) => {\r\n            e.preventDefault();\r\n            setModalGif(undefined);\r\n          }}\r\n        >\r\n          <Gif gif={modalGif} width={200} />\r\n          <div className=\"whatsappShare\">\r\n            <a href=\"whatsapp://send?text=Look Mum\" className=\"whatsappLink\">\r\n              <i class=\"fa fa-whatsapp\"></i>\r\n              whatsapp\r\n            </a>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GifsList;\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Header from \"../../components/header/Header\";\r\nimport GifsList from \"../../components/gifsList/GifsList\";\r\nimport { fetchTrendingGifs, fetchSearchedGifs } from \"../../helpers/fetchGifs\";\r\n\r\nconst Home = () => {\r\n    const items = useSelector((state) => state.items);\r\n    const type = useSelector((state) => state.type);\r\n    const gifPerPage = useSelector((state) => state.gifPerPage);\r\n    const rating = useSelector((state) => state.rating);\r\n    const offset = useSelector((state) => state.offset);\r\n    const dispatch = useDispatch();\r\n \r\n    useEffect(() => {\r\n        dispatch(fetchTrendingGifs(type, gifPerPage, rating, offset));\r\n      }, []);\r\n\r\n  return (\r\n    <div className=\"home__container\" data-testid=\"home__container\">\r\n      <Header />\r\n      <GifsList gifs={items}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./reducers/\";\nimport Home from './pages/home/Home';\n\nimport \"./App.scss\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"main__container\" data-testid=\"main__container\">\n        <Home />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}