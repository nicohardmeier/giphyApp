{"version":3,"sources":["helpers/sortFunction.js","actions/index.js","reducers/index.js","helpers/fetchGifs.js","components/searchOptions/SearchOptions.jsx","components/search/Search.jsx","components/header/Header.jsx","components/gifsList/GifsList.jsx","pages/home/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["sortFunctionASC","a","b","import_datetime","loadGifsFailed","error","type","payload","loadMoreGifsFailed","initialState","items","isLoading","errors","isTrending","query","gifPerPage","rating","offset","sortByDate","mainReducer","state","action","sort","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","apiKey","fetchGifs","mode","dispatch","fetch","then","res","status","json","data","err","fetchMoreGifs","SearchOptions","useSelector","useDispatch","setValue","selector","value","className","data-testid","FormGroup","aria-label","row","FormControlLabel","control","Switch","checked","onChange","color","name","label","Search","useState","inputValue","setInputValue","handleSearch","TextField","id","variant","e","target","onKeyPress","key","preventDefault","Button","onClick","Header","GifsList","gifs","modalGif","setModalGif","onGifClick","gif","length","pageStart","loadMore","console","log","hasMore","useWindow","initialLoad","loader","breakpointCols","default","1100","700","500","columnClassName","map","width","height","style","position","top","left","right","bottom","display","justifyContent","alignItems","background","undefined","title","username","href","Home","useEffect","App","prefersDarkMode","useMediaQuery","theme","React","useMemo","createMuiTheme","palette","primary","main","secondary","typography","fontFamily","ThemeProvider","CssBaseline","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5fa0f664.chunk.js","sourcesContent":["export default function sortFunctionASC(a,b) {\r\n    return (a.import_datetime > b.import_datetime) ? \r\n    1 : \r\n    ((b.import_datetime > a.import_datetime) ? -1 : 0);\r\n} \r\n\r\nexport function sortFunctionDESC(a,b) {\r\n    return (a.import_datetime > b.import_datetime) ? \r\n    1 : \r\n    ((b.import_datetime > a.import_datetime) ? -1 : 0);\r\n} ","export const LOAD_GIFS_PENDING = \"LOAD_GIFS_PENDING\";\r\nexport const LOAD_GIFS_SUCCESS = \"LOAD_GIFS_SUCCESS\";\r\nexport const LOAD_GIFS_FAILED = \"LOAD_GIFS_FAILED\";\r\nexport const LOAD_MORE_GIFS_PENDING = \"LOAD_MORE_GIFS_PENDING\";\r\nexport const LOAD_MORE_GIFS_SUCCESS = \"LOAD_MORE_GIFS_SUCCESS\";\r\nexport const LOAD_MORE_GIFS_FAILED = \"LOAD_MORE_GIFS_FAILED\";\r\nexport const SET_IS_TRENDING = 'SET_IS_TRENDING';\r\nexport const SET_QUERY = 'SET_QUERY';\r\nexport const SET_TYPE = 'SET_TYPE';\r\nexport const SORT_BY_DATE = 'SORT_BY_DATE';\r\n\r\nexport const loadGifsPending = () => ({\r\n  type: LOAD_GIFS_PENDING,\r\n});\r\n\r\nexport const loadGifsSuccess = (gifs) => ({\r\n  type: LOAD_GIFS_SUCCESS,\r\n  payload: gifs,\r\n});\r\n\r\nexport const loadGifsFailed = (error) => ({\r\n  type: LOAD_GIFS_FAILED,\r\n  payload: error,\r\n});\r\n\r\nexport const loadMoreGifsPending = () => ({\r\n  type: LOAD_MORE_GIFS_PENDING,\r\n});\r\n\r\nexport const loadMoreGifsSuccess = (gifs) => ({\r\n  type: LOAD_MORE_GIFS_SUCCESS,\r\n  payload: gifs,\r\n});\r\n\r\nexport const loadMoreGifsFailed = (error) => ({\r\n  type: LOAD_MORE_GIFS_FAILED,\r\n  payload: error,\r\n});\r\n\r\nexport const setIsTrending = (isTrending) => ({\r\n  type: SET_IS_TRENDING,\r\n  payload: isTrending,\r\n});\r\n\r\nexport const setQuery = (query) => ({\r\n  type: SET_QUERY,\r\n  payload: query,\r\n});\r\n\r\nexport const setType = (type) => ({\r\n  type: SET_TYPE,\r\n  payload: type,\r\n});\r\n\r\nexport const sortByDate = (isSorted) => ({\r\n  type: SORT_BY_DATE,\r\n  payload: isSorted,\r\n});","import { createStore, compose, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport sortFunctionASC from '../helpers/sortFunction';\r\n\r\nimport {\r\n  LOAD_GIFS_PENDING,\r\n  LOAD_GIFS_SUCCESS,\r\n  LOAD_GIFS_FAILED,\r\n  LOAD_MORE_GIFS_PENDING,\r\n  LOAD_MORE_GIFS_SUCCESS,\r\n  LOAD_MORE_GIFS_FAILED,\r\n  SET_IS_TRENDING,\r\n  SET_QUERY,\r\n  SET_TYPE,\r\n  SORT_BY_DATE\r\n} from \"../actions\";\r\n\r\nexport const initialState = {\r\n  items: [],\r\n  isLoading: false,\r\n  errors: [],\r\n  isTrending: true,\r\n  query: \"\",\r\n  type: \"gifs\",\r\n  gifPerPage: 20,\r\n  rating: \"g\",\r\n  offset: 0,\r\n  sortByDate: false,\r\n};\r\n\r\nconst mainReducer = (state = initialState, action = {}) => {\r\n  switch (action.type) {\r\n    case LOAD_GIFS_PENDING:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case LOAD_GIFS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        items: action.payload,\r\n        isLoading: false,\r\n        offset: 0\r\n      };\r\n    case LOAD_GIFS_FAILED:\r\n      return {\r\n        ...state,\r\n        errors: action.payload,\r\n        isLoading: false,\r\n      };\r\n      case LOAD_MORE_GIFS_PENDING:\r\n        return {\r\n          ...state,\r\n          isLoading: true,\r\n        };\r\n      case LOAD_MORE_GIFS_SUCCESS:\r\n        return {\r\n          ...state,\r\n          items: [...state.items,...action.payload],\r\n          isLoading: false,\r\n          offset: state.offset + state.gifPerPage\r\n        };\r\n      case LOAD_MORE_GIFS_FAILED:\r\n        return {\r\n          ...state,\r\n          errors: action.payload,\r\n          isLoading: false,\r\n        };\r\n    case SET_QUERY:\r\n      return {\r\n        ...state,\r\n        query: action.payload,\r\n      };\r\n    case SET_IS_TRENDING:\r\n      return {\r\n        ...state,\r\n        isTrending: action.payload,\r\n      };\r\n    case SET_TYPE:\r\n      return {\r\n        ...state,\r\n        type: action.payload,\r\n      };\r\n    case SORT_BY_DATE:\r\n      if (state.sortByDate) {\r\n        return {\r\n          ...state,\r\n          sortByDate: action.payload,\r\n        };\r\n      } else {\r\n        return {\r\n          ...state,\r\n          sortByDate: action.payload,\r\n          items: [...state.items.sort(sortFunctionASC)],\r\n        };\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default mainReducer;\r\n\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const store = createStore(\r\n  mainReducer,\r\n  composeEnhancer(applyMiddleware(thunk))\r\n);\r\n","import {\r\n  loadGifsSuccess,\r\n  loadGifsPending,\r\n  loadGifsFailed,\r\n  loadMoreGifsSuccess,\r\n  loadMoreGifsPending,\r\n  loadMoreGifsFailed,\r\n} from \"../actions\";\r\n\r\nconst apiKey = \"I1d4vejcCtbSj1gZKPq6gTKSbPhPE3KD\";\r\n\r\nexport function fetchGifs(mode, type, gifPerPage, rating, offset, query) {\r\n  return (dispatch) => {\r\n    dispatch(loadGifsPending());\r\n    try {\r\n      fetch(\r\n        `https://api.giphy.com/v1/${type}/${mode}?api_key=${apiKey}&limit=${gifPerPage}&rating=${rating}&offset=${offset}&q=${query}`\r\n      ).then((res) => {\r\n        if (res.status === 200) {\r\n          res.json().then((res) => {\r\n            dispatch(loadGifsSuccess(res.data));\r\n          });\r\n        } else {\r\n          dispatch(loadGifsFailed(res.status));\r\n        }\r\n      });\r\n    } catch (err) {\r\n      dispatch(loadGifsFailed(err));\r\n    }\r\n  };\r\n}\r\n\r\nexport function fetchMoreGifs(mode, type, gifPerPage, rating, offset, query) {\r\n  return (dispatch) => {\r\n    dispatch(loadMoreGifsPending());\r\n    try {\r\n      fetch(\r\n        `https://api.giphy.com/v1/${type}/${mode}?api_key=${apiKey}&limit=${gifPerPage}&rating=${rating}&offset=${offset}&q=${query}`\r\n      ).then((res) => {\r\n        if (res.status === 200) {\r\n          res.json().then((res) => {\r\n            dispatch(loadMoreGifsSuccess(res.data));\r\n          });\r\n        } else {\r\n          dispatch(loadMoreGifsFailed(res.status));\r\n        }\r\n      });\r\n    } catch (err) {\r\n      dispatch(loadMoreGifsFailed(err));\r\n    }\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { SET_TYPE, SORT_BY_DATE } from \"../../actions\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport \"./searchOptions.scss\";\r\n\r\nconst SearchOptions = ({ type }) => {\r\n  const sortByDate = useSelector((state) => state.sortByDate);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const setValue = (selector, value) => {\r\n    switch (selector) {\r\n      case \"type\":\r\n        dispatch({ type: SET_TYPE, payload: value });\r\n        break;\r\n      case \"sortByDate\":\r\n        return dispatch({ type: SORT_BY_DATE, payload: value });\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n  return (\r\n    <div\r\n      className=\"searchOptions__container\"\r\n      data-testid=\"searchOptions__container\"\r\n    >\r\n      <FormGroup aria-label=\"position\" row>\r\n        <FormControlLabel\r\n          data-testid=\"switch__gifs\"\r\n          control={\r\n            <Switch\r\n              checked={type === \"gifs\"}\r\n              onChange={() => {\r\n                type === \"gifs\"\r\n                  ? setValue(\"type\", \"stickers\")\r\n                  : setValue(\"type\", \"gifs\");\r\n              }}\r\n              color=\"primary\"\r\n              name=\"gifs\"\r\n            />\r\n          }\r\n          label=\"gifs\"\r\n        />\r\n        <FormControlLabel\r\n          control={\r\n            <Switch\r\n              checked={type === \"stickers\"}\r\n              onChange={() => {\r\n                type === \"gifs\"\r\n                  ? setValue(\"type\", \"stickers\")\r\n                  : setValue(\"type\", \"gifs\");\r\n              }}\r\n              color=\"primary\"\r\n              name=\"stickers\"\r\n            />\r\n          }\r\n          label=\"stickers\"\r\n        />\r\n        <FormControlLabel\r\n          control={\r\n            <Switch\r\n              checked={sortByDate}\r\n              onChange={() => setValue(\"sortByDate\", !sortByDate)}\r\n              color=\"primary\"\r\n              name=\"sortByDate\"\r\n            />\r\n          }\r\n          label=\"Sort by date\"\r\n        />\r\n      </FormGroup>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchOptions;\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { SET_IS_TRENDING, SET_QUERY, SORT_BY_DATE } from \"../../actions\";\r\nimport { fetchGifs } from \"../../helpers/fetchGifs\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport SearchOptions from \"../searchOptions/SearchOptions\";\r\nimport \"./search.scss\";\r\n\r\nconst Search = ({ type, gifPerPage, rating, offset }) => {\r\n  const [inputValue, setInputValue] = useState();\r\n  const dispatch = useDispatch();\r\n\r\n  const handleOnChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSearch = () => {\r\n    dispatch(fetchGifs(\"search\",type, gifPerPage, rating, offset, inputValue));\r\n    dispatch({ type: SET_IS_TRENDING, payload: false });\r\n    dispatch({ type: SORT_BY_DATE, payload: false });\r\n    dispatch({ type: SET_QUERY, payload: inputValue });\r\n  };\r\n\r\n  const handleTrending = () => {\r\n    dispatch(fetchGifs(\"trending\",type, gifPerPage, rating, offset));\r\n  };\r\n\r\n  return (\r\n    <div className=\"search__container\" data-testid=\"search__container\">\r\n      <div className=\"search__input_row\">\r\n        <TextField\r\n          id=\"outlined-basic\"\r\n          label=\"Search for gifs...\"\r\n          className=\"search__input\"\r\n          variant=\"outlined\"\r\n          data-testid=\"search__input\"\r\n          value={inputValue}\r\n          onChange={handleOnChange}\r\n          onKeyPress={(e) => {\r\n            if (e.key === \"Enter\") {\r\n              e.preventDefault();\r\n              handleSearch();\r\n            }\r\n          }}\r\n        />\r\n\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={handleSearch}\r\n          data-testid=\"search__button\"\r\n          className=\"search__button\"\r\n        >\r\n          Search\r\n        </Button>\r\n      </div>\r\n\r\n      <div className=\"search__options_row\">\r\n        <SearchOptions\r\n          type={type}\r\n          gifPerPage={gifPerPage}\r\n          rating={rating}\r\n          offset={offset}\r\n        />\r\n\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          onClick={handleTrending}\r\n          data-testid=\"trending__button\"\r\n          className=\"trending__button\"\r\n        >\r\n          Trending\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Search from '../search/Search';\r\n\r\nconst Header = () => {\r\n  const type = useSelector((state) => state.type);\r\n  const gifPerPage = useSelector((state) => state.gifPerPage);\r\n  const rating = useSelector((state) => state.rating);\r\n  const offset = useSelector((state) => state.offset);\r\n\r\n  return (\r\n    <div className=\"header__container\" data-testid=\"header__container\">\r\n      <Search type={type} gifPerPage={gifPerPage} rating={rating} offset={offset}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Gif } from \"@giphy/react-components\";\r\nimport Masonry from \"react-masonry-css\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport \"./gifsList.scss\";\r\nimport { fetchMoreGifs } from \"../../helpers/fetchGifs\";\r\n\r\nconst GifsList = ({ gifs, type, gifPerPage, rating, offset }) => {\r\n  const [modalGif, setModalGif] = useState();\r\n  const isLoading = useSelector((state) => state.isLoading);\r\n  const isTrending = useSelector((state) => state.isTrending);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onGifClick = (gif, e) => {\r\n    e.preventDefault();\r\n    setModalGif(gif);\r\n  };\r\n\r\n  const handleLoadMore = () => {\r\n    console.log(\"MORE!!\")\r\n    isTrending\r\n      ? dispatch(fetchMoreGifs(\"trending\", type, gifPerPage, rating, offset))\r\n      : dispatch(fetchMoreGifs(\"search\", type, gifPerPage, rating, offset));\r\n  };\r\n\r\n  const breakpoints = {\r\n    default: 4,\r\n    1100: 3,\r\n    700: 2,\r\n    500: 1,\r\n  };\r\n\r\n  return (\r\n    <div className=\"gifsList__container\" data-testid=\"gifsList__container\">\r\n      {gifs.length > 0 ? (\r\n        <InfiniteScroll\r\n          pageStart={0}\r\n          loadMore={handleLoadMore}\r\n          hasMore={true}\r\n          useWindow={true}\r\n          initialLoad={false}\r\n          loader={\r\n            <div key=\"loading\">\r\n              <p>... loading</p>\r\n            </div>\r\n          }\r\n        >\r\n          <Masonry\r\n            breakpointCols={breakpoints}\r\n            className=\"my-masonry-grid\"\r\n            columnClassName=\"my-masonry-grid_column\"\r\n          >\r\n            {gifs.map((gif) => (\r\n              <div key={gif.id} data-testid=\"gif__item\">\r\n                <Gif\r\n                  gif={gif}\r\n                  width={\"100%\"}\r\n                  height={\"auto\"}\r\n                  onGifClick={onGifClick}\r\n                />\r\n              </div>\r\n            ))}\r\n          </Masonry>\r\n        </InfiniteScroll>\r\n      ) : (\r\n        <h2 className=\"noGifs\">\r\n          Oops we couldn't find anything with that search term\r\n        </h2>\r\n      )}\r\n      {modalGif && (\r\n        <div\r\n          style={{\r\n            position: \"fixed\",\r\n            top: 0,\r\n            left: 0,\r\n            right: 0,\r\n            bottom: 0,\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            background: \"rgba(0, 0, 0, .9)\",\r\n          }}\r\n          onClick={(e) => {\r\n            e.preventDefault();\r\n            setModalGif(undefined);\r\n          }}\r\n        >\r\n          <div className=\"gifModal__container\">\r\n            <Gif gif={modalGif} width={200} />\r\n            {modalGif.title && (\r\n              <>\r\n                <span className=\"infoLabel\">title</span>\r\n                <p>{modalGif.title}</p>\r\n              </>\r\n            )}\r\n            {modalGif.username && (\r\n              <>\r\n                <span className=\"infoLabel\">user</span>\r\n                <p>{modalGif.username}</p>\r\n              </>\r\n            )}\r\n            {modalGif.rating && (\r\n              <>\r\n                <span className=\"infoLabel\">rating</span>\r\n                <p>{modalGif.rating}</p>\r\n              </>\r\n            )}\r\n            <div className=\"whatsappShare\">\r\n              <a href=\"whatsapp://send?text=LookMum\" className=\"whatsappLink\">\r\n                Share on whatsapp\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GifsList;\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Header from \"../../components/header/Header\";\r\nimport GifsList from \"../../components/gifsList/GifsList\";\r\nimport { fetchGifs } from \"../../helpers/fetchGifs\";\r\n\r\nconst Home = () => {\r\n    const items = useSelector((state) => state.items);\r\n    const type = useSelector((state) => state.type);\r\n    const gifPerPage = useSelector((state) => state.gifPerPage);\r\n    const rating = useSelector((state) => state.rating);\r\n    const offset = useSelector((state) => state.offset);\r\n    const dispatch = useDispatch();\r\n \r\n    useEffect(() => {\r\n        dispatch(fetchGifs(\"trending\", type, gifPerPage, rating, offset));\r\n      }, []);\r\n\r\n  return (\r\n    <div className=\"home__container\" data-testid=\"home__container\">\r\n      <Header />\r\n      <GifsList gifs={items} type={type} gifPerPage={gifPerPage} rating={rating} offset={offset}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./reducers/\";\nimport Home from \"./pages/home/Home\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport './App.css';\n\nfunction App() {\n\n  const font =  \"'Ramabhadra', sans-serif\";\n\n  const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\n\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? \"dark\" : \"light\",\n          primary: {\n            main: '#9C27B0',\n          },\n          secondary: {\n            main: '#ECA400',\n          },\n        },\n        typography: {\n          fontFamily: font,\n        }\n      }),\n    [prefersDarkMode]\n  );\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Provider store={store}>\n        <div className=\"main__container\" data-testid=\"main__container\">\n          <Home />\n        </div>\n      </Provider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}